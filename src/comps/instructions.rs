use std::fmt::Display;

pub struct Instruction {
    pub inst_type: InstType,
    pub mode: AddrMode,
    pub reg1: Option<RegType>,
    pub reg2: Option<RegType>,
    pub cond: CondType,
    pub param: Option<u8>,
}

impl Instruction {
    pub const fn from(
        inst_type: InstType,
        mode: AddrMode,
        reg1: Option<RegType>,
        reg2: Option<RegType>,
        cond: CondType,
        param: Option<u8>,
    ) -> Self {
        Instruction {
            inst_type,
            mode,
            reg1,
            reg2,
            cond,
            param,
        }
    }
}

type IN = InstType;
type AM = AddrMode;
type RT = RegType;
type CT = CondType;

pub const INSTRUCTIONS: [Instruction; 0x100] = [
    /*0x00*/ Instruction::from(IN::NOP, AM::IMP, None, None, CT::NONE, None),
    /*0x01*/ Instruction::from(IN::LD, AM::RxD16, Some(RT::BC), None, CT::NONE, None),
    /*0x02*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::BC), Some(RT::A), CT::NONE, None),
    /*0x03*/ Instruction::from(IN::INC, AM::R, Some(RT::BC), None, CT::NONE, None),
    /*0x04*/ Instruction::from(IN::INC, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0x05*/ Instruction::from(IN::DEC, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0x06*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::B), None, CT::NONE, None),
    /*0x07*/ Instruction::from(IN::RLCA, AM::IMP, None, None, CT::NONE, None),
    /*0x08*/ Instruction::from(IN::LD, AM::A16xR, None, Some(RT::SP), CT::NONE, None),
    /*0x09*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::HL), Some(RT::BC), CT::NONE, None),
    /*0x0A*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::A), Some(RT::BC), CT::NONE, None),
    /*0x0B*/ Instruction::from(IN::DEC, AM::R, Some(RT::BC), None, CT::NONE, None),
    /*0x0C*/ Instruction::from(IN::INC, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0x0D*/ Instruction::from(IN::DEC, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0x0E*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::C), None, CT::NONE, None),
    /*0x0F*/ Instruction::from(IN::RRCA, AM::IMP, None, None, CT::NONE, None),
    /*0x10*/ Instruction::from(IN::STOP, AM::IMP, None, None, CT::NONE, None),
    /*0x11*/ Instruction::from(IN::LD, AM::RxD16, Some(RT::DE), None, CT::NONE, None),
    /*0x12*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::DE), Some(RT::A), CT::NONE, None),
    /*0x13*/ Instruction::from(IN::INC, AM::R, Some(RT::DE), None, CT::NONE, None),
    /*0x14*/ Instruction::from(IN::INC, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0x15*/ Instruction::from(IN::DEC, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0x16*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::D), None, CT::NONE, None),
    /*0x17*/ Instruction::from(IN::RLA, AM::IMP, None, None, CT::NONE, None),
    /*0x18*/ Instruction::from(IN::JR, AM::D8, None, None, CT::NONE, None),
    /*0x19*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::HL), Some(RT::DE), CT::NONE, None),
    /*0x1A*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::A), Some(RT::DE), CT::NONE, None),
    /*0x1B*/ Instruction::from(IN::DEC, AM::R, Some(RT::DE), None, CT::NONE, None),
    /*0x1C*/ Instruction::from(IN::INC, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0x1D*/ Instruction::from(IN::DEC, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0x1E*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::E), None, CT::NONE, None),
    /*0x1F*/ Instruction::from(IN::RRA, AM::IMP, None, None, CT::NONE, None),
    /*0x20*/ Instruction::from(IN::JR, AM::D8, None, None, CT::NZ, None),
    /*0x21*/ Instruction::from(IN::LD, AM::RxD16, Some(RT::HL), None, CT::NONE, None),
    /*0x22*/ Instruction::from(IN::LD, AM::HLIxR, Some(RT::HL), Some(RT::A), CT::NONE, None),
    /*0x23*/ Instruction::from(IN::INC, AM::R, Some(RT::HL), None, CT::NONE, None),
    /*0x24*/ Instruction::from(IN::INC, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0x25*/ Instruction::from(IN::DEC, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0x26*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::H), None, CT::NONE, None),
    /*0x27*/ Instruction::from(IN::DAA, AM::IMP, None, None, CT::NONE, None),
    /*0x28*/ Instruction::from(IN::JR, AM::D8, None, None, CT::Z, None),
    /*0x29*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::HL), Some(RT::HL), CT::NONE, None),
    /*0x2A*/ Instruction::from(IN::LD, AM::RxHLI, Some(RT::A), Some(RT::HL), CT::NONE, None),
    /*0x2B*/ Instruction::from(IN::DEC, AM::R, Some(RT::HL), None, CT::NONE, None),
    /*0x2C*/ Instruction::from(IN::INC, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0x2D*/ Instruction::from(IN::DEC, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0x2E*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::L), None, CT::NONE, None),
    /*0x2F*/ Instruction::from(IN::CPL, AM::IMP, None, None, CT::NONE, None),
    /*0x30*/ Instruction::from(IN::JR, AM::D8, None, None, CT::NC, None),
    /*0x31*/ Instruction::from(IN::LD, AM::RxD16, Some(RT::SP), None, CT::NONE, None),
    /*0x32*/ Instruction::from(IN::LD, AM::HLDxR, Some(RT::HL), Some(RT::A), CT::NONE, None),
    /*0x33*/ Instruction::from(IN::INC, AM::R, Some(RT::SP), None, CT::NONE, None),
    /*0x34*/ Instruction::from(IN::INC, AM::MR, Some(RT::HL), None, CT::NONE, None),
    /*0x35*/
    Instruction::from(IN::DEC, AM::MR, Some(RT::HL), None, CT::NONE, None), // AM::MR or AM::R?
    /*0x36*/ Instruction::from(IN::LD, AM::MRxD8, Some(RT::HL), None, CT::NONE, None),
    /*0x37*/ Instruction::from(IN::SCF, AM::IMP, None, None, CT::NONE, None),
    /*0x38*/ Instruction::from(IN::JR, AM::D8, None, None, CT::C, None),
    /*0x39*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::HL), Some(RT::SP), CT::NONE, None),
    /*0x3A*/ Instruction::from(IN::LD, AM::RxHLD, Some(RT::A), Some(RT::HL), CT::NONE, None),
    /*0x3B*/ Instruction::from(IN::DEC, AM::R, Some(RT::SP), None, CT::NONE, None),
    /*0x3C*/ Instruction::from(IN::INC, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0x3D*/ Instruction::from(IN::DEC, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0x3E*/ Instruction::from(IN::LD, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0x3F*/ Instruction::from(IN::CCF, AM::IMP, None, None, CT::NONE, None),
    /*0x40*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::B), CT::NONE, None),
    /*0x41*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::C), CT::NONE, None),
    /*0x42*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::D), CT::NONE, None),
    /*0x43*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::E), CT::NONE, None),
    /*0x44*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::H), CT::NONE, None),
    /*0x45*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::L), CT::NONE, None),
    /*0x46*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::B), Some(RT::HL), CT::NONE, None),
    /*0x47*/ Instruction::from(IN::LD, AM::RxR, Some(RT::B), Some(RT::A), CT::NONE, None),
    /*0x48*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::B), CT::NONE, None),
    /*0x49*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::C), CT::NONE, None),
    /*0x4A*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::D), CT::NONE, None),
    /*0x4B*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::E), CT::NONE, None),
    /*0x4C*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::H), CT::NONE, None),
    /*0x4D*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::L), CT::NONE, None),
    /*0x4E*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::C), Some(RT::HL), CT::NONE, None),
    /*0x4F*/ Instruction::from(IN::LD, AM::RxR, Some(RT::C), Some(RT::A), CT::NONE, None),
    /*0x50*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::B), CT::NONE, None),
    /*0x51*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::C), CT::NONE, None),
    /*0x52*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::D), CT::NONE, None),
    /*0x53*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::E), CT::NONE, None),
    /*0x54*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::H), CT::NONE, None),
    /*0x55*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::L), CT::NONE, None),
    /*0x56*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::D), Some(RT::HL), CT::NONE, None),
    /*0x57*/ Instruction::from(IN::LD, AM::RxR, Some(RT::D), Some(RT::A), CT::NONE, None),
    /*0x58*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::B), CT::NONE, None),
    /*0x59*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::C), CT::NONE, None),
    /*0x5A*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::D), CT::NONE, None),
    /*0x5B*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::E), CT::NONE, None),
    /*0x5C*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::H), CT::NONE, None),
    /*0x5D*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::L), CT::NONE, None),
    /*0x5E*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::E), Some(RT::HL), CT::NONE, None),
    /*0x5F*/ Instruction::from(IN::LD, AM::RxR, Some(RT::E), Some(RT::A), CT::NONE, None),
    /*0x60*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::B), CT::NONE, None),
    /*0x61*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::C), CT::NONE, None),
    /*0x62*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::D), CT::NONE, None),
    /*0x63*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::E), CT::NONE, None),
    /*0x64*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::H), CT::NONE, None),
    /*0x65*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::L), CT::NONE, None),
    /*0x66*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::H), Some(RT::HL), CT::NONE, None),
    /*0x67*/ Instruction::from(IN::LD, AM::RxR, Some(RT::H), Some(RT::A), CT::NONE, None),
    /*0x68*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::B), CT::NONE, None),
    /*0x69*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::C), CT::NONE, None),
    /*0x6A*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::D), CT::NONE, None),
    /*0x6B*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::E), CT::NONE, None),
    /*0x6C*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::H), CT::NONE, None),
    /*0x6D*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::L), CT::NONE, None),
    /*0x6E*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::L), Some(RT::HL), CT::NONE, None),
    /*0x6F*/ Instruction::from(IN::LD, AM::RxR, Some(RT::L), Some(RT::A), CT::NONE, None),
    /*0x70*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::B), CT::NONE, None),
    /*0x71*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::C), CT::NONE, None),
    /*0x72*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::D), CT::NONE, None),
    /*0x73*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::E), CT::NONE, None),
    /*0x74*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::H), CT::NONE, None),
    /*0x75*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::L), CT::NONE, None),
    /*0x76*/ Instruction::from(IN::HALT, AM::IMP, None, None, CT::NONE, None),
    /*0x77*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::HL), Some(RT::A), CT::NONE, None),
    /*0x78*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::B), CT::NONE, None),
    /*0x79*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::C), CT::NONE, None),
    /*0x7A*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::D), CT::NONE, None),
    /*0x7B*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::E), CT::NONE, None),
    /*0x7C*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::H), CT::NONE, None),
    /*0x7D*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::L), CT::NONE, None),
    /*0x7E*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::A), Some(RT::HL), CT::NONE, None),
    /*0x7F*/ Instruction::from(IN::LD, AM::RxR, Some(RT::A), Some(RT::A), CT::NONE, None),
    /*0x80*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::B), CT::NONE, None),
    /*0x81*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::C), CT::NONE, None),
    /*0x82*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::D), CT::NONE, None),
    /*0x83*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::E), CT::NONE, None),
    /*0x84*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::H), CT::NONE, None),
    /*0x85*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::L), CT::NONE, None),
    /*0x86*/ Instruction::from(IN::ADD, AM::RxMR, Some(RT::A), Some(RT::HL), CT::NONE, None),
    /*0x87*/ Instruction::from(IN::ADD, AM::RxR, Some(RT::A), Some(RT::A), CT::NONE, None),
    /*0x88*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::B), CT::NONE, None),
    /*0x89*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::C), CT::NONE, None),
    /*0x8A*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::D), CT::NONE, None),
    /*0x8B*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::E), CT::NONE, None),
    /*0x8C*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::H), CT::NONE, None),
    /*0x8D*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::L), CT::NONE, None),
    /*0x8E*/ Instruction::from(IN::ADC, AM::RxMR, Some(RT::A), Some(RT::HL), CT::NONE, None),
    /*0x8F*/ Instruction::from(IN::ADC, AM::RxR, Some(RT::A), Some(RT::A), CT::NONE, None),
    /*0x90*/ Instruction::from(IN::SUB, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0x91*/ Instruction::from(IN::SUB, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0x92*/ Instruction::from(IN::SUB, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0x93*/ Instruction::from(IN::SUB, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0x94*/ Instruction::from(IN::SUB, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0x95*/ Instruction::from(IN::SUB, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0x96*/ Instruction::from(IN::SUB, AM::MR, Some(RT::HL), None, CT::NONE, None),
    /*0x97*/ Instruction::from(IN::SUB, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0x98*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::B), CT::NONE, None),
    /*0x99*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::C), CT::NONE, None),
    /*0x9A*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::D), CT::NONE, None),
    /*0x9B*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::E), CT::NONE, None),
    /*0x9C*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::H), CT::NONE, None),
    /*0x9D*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::L), CT::NONE, None),
    /*0x9E*/ Instruction::from(IN::SBC, AM::RxMR, Some(RT::A), Some(RT::HL), CT::NONE, None),
    /*0x9F*/ Instruction::from(IN::SBC, AM::RxR, Some(RT::A), Some(RT::A), CT::NONE, None),
    /*0xA0*/ Instruction::from(IN::AND, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0xA1*/ Instruction::from(IN::AND, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0xA2*/ Instruction::from(IN::AND, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0xA3*/ Instruction::from(IN::AND, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0xA4*/ Instruction::from(IN::AND, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0xA5*/ Instruction::from(IN::AND, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0xA6*/ Instruction::from(IN::AND, AM::MR, Some(RT::HL), None, CT::NONE, None),
    /*0xA7*/ Instruction::from(IN::AND, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0xA8*/ Instruction::from(IN::XOR, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0xA9*/ Instruction::from(IN::XOR, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0xAA*/ Instruction::from(IN::XOR, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0xAB*/ Instruction::from(IN::XOR, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0xAC*/ Instruction::from(IN::XOR, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0xAD*/ Instruction::from(IN::XOR, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0xAE*/ Instruction::from(IN::XOR, AM::MR, Some(RT::HL), None, CT::NONE, None),
    /*0xAF*/ Instruction::from(IN::XOR, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0xB0*/ Instruction::from(IN::OR, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0xB1*/ Instruction::from(IN::OR, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0xB2*/ Instruction::from(IN::OR, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0xB3*/ Instruction::from(IN::OR, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0xB4*/ Instruction::from(IN::OR, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0xB5*/ Instruction::from(IN::OR, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0xB6*/ Instruction::from(IN::OR, AM::MR, Some(RT::HL), None, CT::NONE, None),
    /*0xB7*/ Instruction::from(IN::OR, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0xB8*/ Instruction::from(IN::CP, AM::R, Some(RT::B), None, CT::NONE, None),
    /*0xB9*/ Instruction::from(IN::CP, AM::R, Some(RT::C), None, CT::NONE, None),
    /*0xBA*/ Instruction::from(IN::CP, AM::R, Some(RT::D), None, CT::NONE, None),
    /*0xBB*/ Instruction::from(IN::CP, AM::R, Some(RT::E), None, CT::NONE, None),
    /*0xBC*/ Instruction::from(IN::CP, AM::R, Some(RT::H), None, CT::NONE, None),
    /*0xBD*/ Instruction::from(IN::CP, AM::R, Some(RT::L), None, CT::NONE, None),
    /*0xBE*/ Instruction::from(IN::CP, AM::MR, Some(RT::HL), None, CT::NONE, None),
    /*0xBF*/ Instruction::from(IN::CP, AM::R, Some(RT::A), None, CT::NONE, None),
    /*0xC0*/ Instruction::from(IN::RET, AM::IMP, None, None, CT::NZ, None),
    /*0xC1*/ Instruction::from(IN::POP, AM::R, Some(RT::BC), None, CT::NONE, None),
    /*0xC2*/ Instruction::from(IN::JP, AM::D16, None, None, CT::NZ, None),
    /*0xC3*/ Instruction::from(IN::JP, AM::D16, None, None, CT::NONE, None),
    /*0xC4*/ Instruction::from(IN::CALL, AM::D16, None, None, CT::NZ, None),
    /*0xC5*/ Instruction::from(IN::PUSH, AM::R, Some(RT::BC), None, CT::NONE, None),
    /*0xC6*/
    Instruction::from(IN::ADD, AM::RxD8, Some(RT::A), None, CT::NONE, None), // NOTICE: Shouldn't this be AM:RxD8?
    /*0xC7*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x00)),
    /*0xC8*/ Instruction::from(IN::RET, AM::IMP, None, None, CT::Z, None),
    /*0xC9*/ Instruction::from(IN::RET, AM::IMP, None, None, CT::NONE, None),
    /*0xCA*/ Instruction::from(IN::JP, AM::D16, None, None, CT::Z, None),
    /*0xCB*/ Instruction::from(IN::CB, AM::D8, None, None, CT::NONE, None),
    /*0xCC*/ Instruction::from(IN::CALL, AM::D16, None, None, CT::Z, None),
    /*0xCD*/ Instruction::from(IN::CALL, AM::D16, None, None, CT::NONE, None),
    /*0xCE*/ Instruction::from(IN::ADC, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xCF*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x08)),
    /*0xD0*/ Instruction::from(IN::RET, AM::IMP, None, None, CT::NC, None),
    /*0xD1*/ Instruction::from(IN::POP, AM::R, Some(RT::DE), None, CT::NONE, None),
    /*0xD2*/ Instruction::from(IN::JP, AM::D16, None, None, CT::NC, None),
    /*0xD3*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xD4*/ Instruction::from(IN::CALL, AM::D16, None, None, CT::NC, None),
    /*0xD5*/ Instruction::from(IN::PUSH, AM::R, Some(RT::DE), None, CT::NONE, None),
    /*0xD6*/ Instruction::from(IN::SUB, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xD7*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x10)),
    /*0xD8*/ Instruction::from(IN::RET, AM::IMP, None, None, CT::C, None),
    /*0xD9*/ Instruction::from(IN::RETI, AM::IMP, None, None, CT::NONE, None),
    /*0xDA*/ Instruction::from(IN::JP, AM::D16, None, None, CT::C, None),
    /*0xDB*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xDC*/ Instruction::from(IN::CALL, AM::D16, None, None, CT::C, None),
    /*0xDD*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xDE*/ Instruction::from(IN::SBC, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xDF*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x18)),
    /*0xE0*/ Instruction::from(IN::LDH, AM::A8xR, None, Some(RT::A), CT::NONE, None),
    /*0xE1*/ Instruction::from(IN::POP, AM::R, Some(RT::HL), None, CT::NONE, None),
    /*0xE2*/ Instruction::from(IN::LD, AM::MRxR, Some(RT::C), Some(RT::A), CT::NONE, None),
    /*0xE3*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xE4*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xE5*/ Instruction::from(IN::PUSH, AM::R, Some(RT::HL), None, CT::NONE, None),
    /*0xE6*/ Instruction::from(IN::AND, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xE7*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x20)),
    /*0xE8*/ Instruction::from(IN::ADD, AM::RxD8, Some(RT::SP), None, CT::NONE, None),
    /*0xE9*/ Instruction::from(IN::JP, AM::R, Some(RT::HL), None, CT::NONE, None),
    /*0xEA*/ Instruction::from(IN::LD, AM::A16xR, None, Some(RT::A), CT::NONE, None),
    /*0xEB*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xEC*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xED*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xEE*/ Instruction::from(IN::XOR, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xEF*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x28)),
    /*0xF0*/ Instruction::from(IN::LDH, AM::RxA8, Some(RT::A), None, CT::NONE, None),
    /*0xF1*/ Instruction::from(IN::POP, AM::R, Some(RT::AF), None, CT::NONE, None),
    /*0xF2*/ Instruction::from(IN::LD, AM::RxMR, Some(RT::A), Some(RT::C), CT::NONE, None),
    /*0xF3*/ Instruction::from(IN::DI, AM::IMP, None, None, CT::NONE, None),
    /*0xF4*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xF5*/ Instruction::from(IN::PUSH, AM::R, Some(RT::AF), None, CT::NONE, None),
    /*0xF6*/ Instruction::from(IN::OR, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xF7*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x30)),
    /*0xF8*/
    Instruction::from(
        IN::LD,
        AM::HLxSPR,
        Some(RT::HL),
        Some(RT::SP),
        CT::NONE,
        None,
    ),
    /*0xF9*/ Instruction::from(IN::LD, AM::RxR, Some(RT::SP), Some(RT::HL), CT::NONE, None),
    /*0xFA*/ Instruction::from(IN::LD, AM::RxA16, Some(RT::A), None, CT::NONE, None),
    /*0xFB*/ Instruction::from(IN::EI, AM::IMP, None, None, CT::NONE, None),
    /*0xFC*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xFD*/ Instruction::from(IN::NONE, AM::IMP, None, None, CT::NONE, None),
    /*0xFE*/ Instruction::from(IN::CP, AM::RxD8, Some(RT::A), None, CT::NONE, None),
    /*0xFF*/ Instruction::from(IN::RST, AM::IMP, None, None, CT::NONE, Some(0x38)),
];

pub fn inst_by_opcode(opcode: u8) -> &'static Instruction {
    &INSTRUCTIONS[opcode as usize]
}

#[derive(PartialEq, Eq)]
pub enum AddrMode {
    IMP,
    RxD16,
    RxR,
    MRxR,
    R,
    RxD8,
    RxMR,
    RxHLI,
    RxHLD,
    HLIxR,
    HLDxR,
    RxA8,
    A8xR,
    HLxSPR,
    D16,
    D8,
    D16xR,
    MRxD8,
    MR,
    A16xR,
    RxA16,
}

#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum RegType {
    NONE,
    A,
    F,
    B,
    C,
    D,
    E,
    H,
    L,
    AF,
    BC,
    DE,
    HL,
    SP,
    PC,
}

impl Display for RegType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        type RT = RegType;

        write!(f, "{}", match *self {
            RT::NONE => "NONE",
            RT::A => "A",
            RT::F => "F",
            RT::B => "B",
            RT::C => "C",
            RT::D => "D",
            RT::E => "E",
            RT::H => "H",
            RT::L => "L",
            RT::AF => "AF",
            RT::BC => "BC",
            RT::DE => "DE",
            RT::HL => "HL",
            RT::SP => "SP",
            RT::PC => "PC",
        })
    }
}
#[derive(Clone, Copy)]
pub enum InstType {
    NONE,
    NOP,
    LD,
    INC,
    DEC,
    RLCA,
    ADD,
    RRCA,
    STOP,
    RLA,
    JR,
    RRA,
    DAA,
    CPL,
    SCF,
    CCF,
    HALT,
    ADC,
    SUB,
    SBC,
    AND,
    XOR,
    OR,
    CP,
    POP,
    JP,
    PUSH,
    RET,
    CB,
    CALL,
    RETI,
    LDH,
    JPHL,
    DI,
    EI,
    RST,
    ERR,
    //CB instructions...
    RLC,
    RRC,
    RL,
    RR,
    SLA,
    SRA,
    SWAP,
    SRL,
    BIT,
    RES,
    SET,
}

impl Display for InstType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        type IN = InstType;
        let str = match *self {
            IN::NONE => String::from("NONE"),
            IN::NOP => String::from("NOP"),
            IN::LD => String::from("LD"),
            IN::INC => String::from("INC"),
            IN::DEC => String::from("DEC"),
            IN::RLCA => String::from("RLCA"),
            IN::ADD => String::from("ADD"),
            IN::RRCA => String::from("RRCA"),
            IN::STOP => String::from("STOP"),
            IN::RLA => String::from("RLA"),
            IN::JR => String::from("JR"),
            IN::RRA => String::from("RRA"),
            IN::DAA => String::from("DAA"),
            IN::CPL => String::from("CPL"),
            IN::SCF => String::from("SCF"),
            IN::CCF => String::from("CCF"),
            IN::HALT => String::from("HALT"),
            IN::ADC => String::from("ADC"),
            IN::SUB => String::from("SUB"),
            IN::SBC => String::from("SBC"),
            IN::AND => String::from("AND"),
            IN::XOR => String::from("XOR"),
            IN::OR => String::from("OR"),
            IN::CP => String::from("CP"),
            IN::POP => String::from("POP"),
            IN::JP => String::from("JP"),
            IN::PUSH => String::from("PUSH"),
            IN::RET => String::from("RET"),
            IN::CB => String::from("CB"),
            IN::CALL => String::from("CALL"),
            IN::RETI => String::from("RETI"),
            IN::LDH => String::from("LDH"),
            IN::JPHL => String::from("JPHL"),
            IN::DI => String::from("DI"),
            IN::EI => String::from("EI"),
            IN::RST => String::from("RST"),
            IN::ERR => String::from("ERR"),
            IN::RLC => String::from("RLC"),
            IN::RRC => String::from("RRC"),
            IN::RL => String::from("RL"),
            IN::RR => String::from("RR"),
            IN::SLA => String::from("SLA"),
            IN::SRA => String::from("SRA"),
            IN::SWAP => String::from("SWAP"),
            IN::SRL => String::from("SRL"),
            IN::BIT => String::from("BIT"),
            IN::RES => String::from("RES"),
            IN::SET => String::from("SET"),
        };

        write!(f, "{}", str)
    }
}

#[derive(PartialEq, Eq)]
pub enum CondType {
    NONE,
    NZ,
    Z,
    NC,
    C,
}
